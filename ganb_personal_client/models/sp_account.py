# coding: utf-8

"""
    GMO Aozora Net Bank Open API

    <p>オープンAPI仕様書（PDF版）は下記リンクをご参照ください</p> <div>   <div style='display:inline-block;'><a style='text-decoration:none; font-weight:bold; color:#00b8d4;' href='https://gmo-aozora.com/business/service/api-specification.html' target='_blank'>オープンAPI仕様書</a></div><div style='display:inline-block; margin-left:2px; left:2px; width:10px; height:10px; border-top:2px solid #00b8d4; border-right:2px solid #00b8d4; transparent;-webkit-transform:rotate(45deg); transform: rotate(45deg);'></div> </div> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>共通仕様</h4> <div style='width:100%; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>＜HTTPリクエストヘッダ＞</p>   <div style='display:table; margin-left:10px; background-color:#29659b;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff;'>項目</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; color:#fff;'>仕様</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>プロトコル</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>HTTP1.1/HTTPS</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>charset</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>UTF-8</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>content-type</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>application/json</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>domain_name</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       本番環境：api.gmo-aozora.com</br>       開発環境：stg-api.gmo-aozora.com     </div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>メインURL</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       https://{domain_name}/ganb/api/personal/{version}</br>       <span style='border-bottom:solid 1px;'>Version:1.x.x</span> の場合</br>       　https://api.gmo-aozora.com/ganb/api/personal/<span style='border-bottom:solid 1px;'>v1</span>     </div>   </div> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜リクエスト共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <p style='padding-left:40px;'>パラメータの値が空の場合、またはパラメータ自体が設定されていない場合、どちらもNULLとして扱います</p> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜レスポンス共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <ul>     <li>レスポンスデータ</li>       <ul>         <li style='list-style-type:none;'>レスポンスデータの値が空の場合または、レスポンスデータ自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>     <li>配列</li>       <ul>         <li style='list-style-type:none;'>配列の要素の値が空の場合は「空のリスト」と記載</li>         <li style='list-style-type:none;'>配列自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>   </ul> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜更新系APIに関する注意事項＞</p>   <ul>     <li style='list-style-type:none;'>更新系処理がタイムアウトとなった場合、処理自体は実行されている可能性がありますので、</li>     <li style='list-style-type:none;'>再実行を行う必要がある場合は必ず照会系の処理で実行状況を確認してから再実行を行ってください</li>   </ul> </div>   # noqa: E501

    OpenAPI spec version: 1.1.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'sp_account_type_code': 'str',
        'sp_account_type_code_name': 'str',
        'sp_account_name': 'str',
        'sp_account_branch_code': 'str',
        'sp_account_branch_name': 'str',
        'sp_account_number': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'sp_account_type_code': 'spAccountTypeCode',
        'sp_account_type_code_name': 'spAccountTypeCodeName',
        'sp_account_name': 'spAccountName',
        'sp_account_branch_code': 'spAccountBranchCode',
        'sp_account_branch_name': 'spAccountBranchName',
        'sp_account_number': 'spAccountNumber'
    }

    def __init__(self, account_id=None, sp_account_type_code=None, sp_account_type_code_name=None, sp_account_name=None, sp_account_branch_code=None, sp_account_branch_name=None, sp_account_number=None):  # noqa: E501
        """SpAccount - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._sp_account_type_code = None
        self._sp_account_type_code_name = None
        self._sp_account_name = None
        self._sp_account_branch_code = None
        self._sp_account_branch_name = None
        self._sp_account_number = None
        self.discriminator = None

        self.account_id = account_id
        self.sp_account_type_code = sp_account_type_code
        self.sp_account_type_code_name = sp_account_type_code_name
        self.sp_account_name = sp_account_name
        if sp_account_branch_code is not None:
            self.sp_account_branch_code = sp_account_branch_code
        if sp_account_branch_name is not None:
            self.sp_account_branch_name = sp_account_branch_name
        if sp_account_number is not None:
            self.sp_account_number = sp_account_number

    @property
    def account_id(self):
        """Gets the account_id of this SpAccount.  # noqa: E501

        口座ID 半角英数字 つかいわけ口座を識別するID   # noqa: E501

        :return: The account_id of this SpAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SpAccount.

        口座ID 半角英数字 つかいわけ口座を識別するID   # noqa: E501

        :param account_id: The account_id of this SpAccount.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501
        if account_id is not None and len(account_id) > 29:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `29`")  # noqa: E501
        if account_id is not None and len(account_id) < 12:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `12`")  # noqa: E501

        self._account_id = account_id

    @property
    def sp_account_type_code(self):
        """Gets the sp_account_type_code of this SpAccount.  # noqa: E501

        つかいわけ口座種別コード 半角数字 ・1=親口座 ・2=子口座   # noqa: E501

        :return: The sp_account_type_code of this SpAccount.  # noqa: E501
        :rtype: str
        """
        return self._sp_account_type_code

    @sp_account_type_code.setter
    def sp_account_type_code(self, sp_account_type_code):
        """Sets the sp_account_type_code of this SpAccount.

        つかいわけ口座種別コード 半角数字 ・1=親口座 ・2=子口座   # noqa: E501

        :param sp_account_type_code: The sp_account_type_code of this SpAccount.  # noqa: E501
        :type: str
        """
        if sp_account_type_code is None:
            raise ValueError("Invalid value for `sp_account_type_code`, must not be `None`")  # noqa: E501
        if sp_account_type_code is not None and len(sp_account_type_code) > 1:
            raise ValueError("Invalid value for `sp_account_type_code`, length must be less than or equal to `1`")  # noqa: E501
        if sp_account_type_code is not None and len(sp_account_type_code) < 1:
            raise ValueError("Invalid value for `sp_account_type_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._sp_account_type_code = sp_account_type_code

    @property
    def sp_account_type_code_name(self):
        """Gets the sp_account_type_code_name of this SpAccount.  # noqa: E501

        つかいわけ口座種別コード名称 全角文字 つかいわけ口座種別コードの名称   # noqa: E501

        :return: The sp_account_type_code_name of this SpAccount.  # noqa: E501
        :rtype: str
        """
        return self._sp_account_type_code_name

    @sp_account_type_code_name.setter
    def sp_account_type_code_name(self, sp_account_type_code_name):
        """Sets the sp_account_type_code_name of this SpAccount.

        つかいわけ口座種別コード名称 全角文字 つかいわけ口座種別コードの名称   # noqa: E501

        :param sp_account_type_code_name: The sp_account_type_code_name of this SpAccount.  # noqa: E501
        :type: str
        """
        if sp_account_type_code_name is None:
            raise ValueError("Invalid value for `sp_account_type_code_name`, must not be `None`")  # noqa: E501
        if sp_account_type_code_name is not None and len(sp_account_type_code_name) > 3:
            raise ValueError("Invalid value for `sp_account_type_code_name`, length must be less than or equal to `3`")  # noqa: E501
        if sp_account_type_code_name is not None and len(sp_account_type_code_name) < 3:
            raise ValueError("Invalid value for `sp_account_type_code_name`, length must be greater than or equal to `3`")  # noqa: E501

        self._sp_account_type_code_name = sp_account_type_code_name

    @property
    def sp_account_name(self):
        """Gets the sp_account_name of this SpAccount.  # noqa: E501

        つかいわけ口座名 全半角英数記号文字   # noqa: E501

        :return: The sp_account_name of this SpAccount.  # noqa: E501
        :rtype: str
        """
        return self._sp_account_name

    @sp_account_name.setter
    def sp_account_name(self, sp_account_name):
        """Sets the sp_account_name of this SpAccount.

        つかいわけ口座名 全半角英数記号文字   # noqa: E501

        :param sp_account_name: The sp_account_name of this SpAccount.  # noqa: E501
        :type: str
        """
        if sp_account_name is None:
            raise ValueError("Invalid value for `sp_account_name`, must not be `None`")  # noqa: E501
        if sp_account_name is not None and len(sp_account_name) > 10:
            raise ValueError("Invalid value for `sp_account_name`, length must be less than or equal to `10`")  # noqa: E501
        if sp_account_name is not None and len(sp_account_name) < 1:
            raise ValueError("Invalid value for `sp_account_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._sp_account_name = sp_account_name

    @property
    def sp_account_branch_code(self):
        """Gets the sp_account_branch_code of this SpAccount.  # noqa: E501

        支店コード 半角数字 つかいわけ口座種別コードが「2=子口座」の場合のみ設定 該当しない場合は項目自体を設定しません   # noqa: E501

        :return: The sp_account_branch_code of this SpAccount.  # noqa: E501
        :rtype: str
        """
        return self._sp_account_branch_code

    @sp_account_branch_code.setter
    def sp_account_branch_code(self, sp_account_branch_code):
        """Sets the sp_account_branch_code of this SpAccount.

        支店コード 半角数字 つかいわけ口座種別コードが「2=子口座」の場合のみ設定 該当しない場合は項目自体を設定しません   # noqa: E501

        :param sp_account_branch_code: The sp_account_branch_code of this SpAccount.  # noqa: E501
        :type: str
        """
        if sp_account_branch_code is not None and len(sp_account_branch_code) > 3:
            raise ValueError("Invalid value for `sp_account_branch_code`, length must be less than or equal to `3`")  # noqa: E501
        if sp_account_branch_code is not None and len(sp_account_branch_code) < 3:
            raise ValueError("Invalid value for `sp_account_branch_code`, length must be greater than or equal to `3`")  # noqa: E501

        self._sp_account_branch_code = sp_account_branch_code

    @property
    def sp_account_branch_name(self):
        """Gets the sp_account_branch_name of this SpAccount.  # noqa: E501

        支店名 全角文字 つかいわけ口座種別コードが「2=子口座」の場合のみ設定 該当しない場合は項目自体を設定しません   # noqa: E501

        :return: The sp_account_branch_name of this SpAccount.  # noqa: E501
        :rtype: str
        """
        return self._sp_account_branch_name

    @sp_account_branch_name.setter
    def sp_account_branch_name(self, sp_account_branch_name):
        """Sets the sp_account_branch_name of this SpAccount.

        支店名 全角文字 つかいわけ口座種別コードが「2=子口座」の場合のみ設定 該当しない場合は項目自体を設定しません   # noqa: E501

        :param sp_account_branch_name: The sp_account_branch_name of this SpAccount.  # noqa: E501
        :type: str
        """
        if sp_account_branch_name is not None and len(sp_account_branch_name) > 30:
            raise ValueError("Invalid value for `sp_account_branch_name`, length must be less than or equal to `30`")  # noqa: E501
        if sp_account_branch_name is not None and len(sp_account_branch_name) < 1:
            raise ValueError("Invalid value for `sp_account_branch_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._sp_account_branch_name = sp_account_branch_name

    @property
    def sp_account_number(self):
        """Gets the sp_account_number of this SpAccount.  # noqa: E501

        口座番号 半角数字 つかいわけ口座種別コードが「2=子口座」の場合のみ設定 該当しない場合は項目自体を設定しません   # noqa: E501

        :return: The sp_account_number of this SpAccount.  # noqa: E501
        :rtype: str
        """
        return self._sp_account_number

    @sp_account_number.setter
    def sp_account_number(self, sp_account_number):
        """Sets the sp_account_number of this SpAccount.

        口座番号 半角数字 つかいわけ口座種別コードが「2=子口座」の場合のみ設定 該当しない場合は項目自体を設定しません   # noqa: E501

        :param sp_account_number: The sp_account_number of this SpAccount.  # noqa: E501
        :type: str
        """
        if sp_account_number is not None and len(sp_account_number) > 7:
            raise ValueError("Invalid value for `sp_account_number`, length must be less than or equal to `7`")  # noqa: E501
        if sp_account_number is not None and len(sp_account_number) < 7:
            raise ValueError("Invalid value for `sp_account_number`, length must be greater than or equal to `7`")  # noqa: E501

        self._sp_account_number = sp_account_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
