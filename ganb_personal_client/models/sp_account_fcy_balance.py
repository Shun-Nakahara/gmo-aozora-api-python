# coding: utf-8

"""
    GMO Aozora Net Bank Open API

    <p>オープンAPI仕様書（PDF版）は下記リンクをご参照ください</p> <div>   <div style='display:inline-block;'><a style='text-decoration:none; font-weight:bold; color:#00b8d4;' href='https://gmo-aozora.com/business/service/api-specification.html' target='_blank'>オープンAPI仕様書</a></div><div style='display:inline-block; margin-left:2px; left:2px; width:10px; height:10px; border-top:2px solid #00b8d4; border-right:2px solid #00b8d4; transparent;-webkit-transform:rotate(45deg); transform: rotate(45deg);'></div> </div> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>共通仕様</h4> <div style='width:100%; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>＜HTTPリクエストヘッダ＞</p>   <div style='display:table; margin-left:10px; background-color:#29659b;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff;'>項目</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; color:#fff;'>仕様</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>プロトコル</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>HTTP1.1/HTTPS</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>charset</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>UTF-8</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>content-type</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>application/json</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>domain_name</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       本番環境：api.gmo-aozora.com</br>       開発環境：stg-api.gmo-aozora.com     </div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>メインURL</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       https://{domain_name}/ganb/api/personal/{version}</br>       <span style='border-bottom:solid 1px;'>Version:1.x.x</span> の場合</br>       　https://api.gmo-aozora.com/ganb/api/personal/<span style='border-bottom:solid 1px;'>v1</span>     </div>   </div> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜リクエスト共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <p style='padding-left:40px;'>パラメータの値が空の場合、またはパラメータ自体が設定されていない場合、どちらもNULLとして扱います</p> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜レスポンス共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <ul>     <li>レスポンスデータ</li>       <ul>         <li style='list-style-type:none;'>レスポンスデータの値が空の場合または、レスポンスデータ自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>     <li>配列</li>       <ul>         <li style='list-style-type:none;'>配列の要素の値が空の場合は「空のリスト」と記載</li>         <li style='list-style-type:none;'>配列自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>   </ul> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜更新系APIに関する注意事項＞</p>   <ul>     <li style='list-style-type:none;'>更新系処理がタイムアウトとなった場合、処理自体は実行されている可能性がありますので、</li>     <li style='list-style-type:none;'>再実行を行う必要がある場合は必ず照会系の処理で実行状況を確認してから再実行を行ってください</li>   </ul> </div>   # noqa: E501

    OpenAPI spec version: 1.1.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpAccountFcyBalance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency_code': 'str',
        'currency_name': 'str',
        'fcy_total_balance': 'str',
        'ttb': 'str',
        'base_rate_date': 'str',
        'base_rate_time': 'str',
        'yen_equivalent': 'str'
    }

    attribute_map = {
        'currency_code': 'currencyCode',
        'currency_name': 'currencyName',
        'fcy_total_balance': 'fcyTotalBalance',
        'ttb': 'ttb',
        'base_rate_date': 'baseRateDate',
        'base_rate_time': 'baseRateTime',
        'yen_equivalent': 'yenEquivalent'
    }

    def __init__(self, currency_code=None, currency_name=None, fcy_total_balance=None, ttb=None, base_rate_date=None, base_rate_time=None, yen_equivalent=None):  # noqa: E501
        """SpAccountFcyBalance - a model defined in Swagger"""  # noqa: E501

        self._currency_code = None
        self._currency_name = None
        self._fcy_total_balance = None
        self._ttb = None
        self._base_rate_date = None
        self._base_rate_time = None
        self._yen_equivalent = None
        self.discriminator = None

        self.currency_code = currency_code
        self.currency_name = currency_name
        self.fcy_total_balance = fcy_total_balance
        self.ttb = ttb
        self.base_rate_date = base_rate_date
        self.base_rate_time = base_rate_time
        self.yen_equivalent = yen_equivalent

    @property
    def currency_code(self):
        """Gets the currency_code of this SpAccountFcyBalance.  # noqa: E501

        通貨コード 半角文字 ISO4217に準拠した通貨コード   # noqa: E501

        :return: The currency_code of this SpAccountFcyBalance.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this SpAccountFcyBalance.

        通貨コード 半角文字 ISO4217に準拠した通貨コード   # noqa: E501

        :param currency_code: The currency_code of this SpAccountFcyBalance.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501
        if currency_code is not None and len(currency_code) > 3:
            raise ValueError("Invalid value for `currency_code`, length must be less than or equal to `3`")  # noqa: E501
        if currency_code is not None and len(currency_code) < 3:
            raise ValueError("Invalid value for `currency_code`, length must be greater than or equal to `3`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def currency_name(self):
        """Gets the currency_name of this SpAccountFcyBalance.  # noqa: E501

        通貨名 全角文字 ISO4217に準拠した通貨コードの当行での名称   # noqa: E501

        :return: The currency_name of this SpAccountFcyBalance.  # noqa: E501
        :rtype: str
        """
        return self._currency_name

    @currency_name.setter
    def currency_name(self, currency_name):
        """Sets the currency_name of this SpAccountFcyBalance.

        通貨名 全角文字 ISO4217に準拠した通貨コードの当行での名称   # noqa: E501

        :param currency_name: The currency_name of this SpAccountFcyBalance.  # noqa: E501
        :type: str
        """
        if currency_name is None:
            raise ValueError("Invalid value for `currency_name`, must not be `None`")  # noqa: E501
        if currency_name is not None and len(currency_name) > 10:
            raise ValueError("Invalid value for `currency_name`, length must be less than or equal to `10`")  # noqa: E501
        if currency_name is not None and len(currency_name) < 1:
            raise ValueError("Invalid value for `currency_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._currency_name = currency_name

    @property
    def fcy_total_balance(self):
        """Gets the fcy_total_balance of this SpAccountFcyBalance.  # noqa: E501

        外貨残高 半角数字　少数点および小数部最大3桁　マイナス含む   # noqa: E501

        :return: The fcy_total_balance of this SpAccountFcyBalance.  # noqa: E501
        :rtype: str
        """
        return self._fcy_total_balance

    @fcy_total_balance.setter
    def fcy_total_balance(self, fcy_total_balance):
        """Sets the fcy_total_balance of this SpAccountFcyBalance.

        外貨残高 半角数字　少数点および小数部最大3桁　マイナス含む   # noqa: E501

        :param fcy_total_balance: The fcy_total_balance of this SpAccountFcyBalance.  # noqa: E501
        :type: str
        """
        if fcy_total_balance is None:
            raise ValueError("Invalid value for `fcy_total_balance`, must not be `None`")  # noqa: E501
        if fcy_total_balance is not None and len(fcy_total_balance) > 20:
            raise ValueError("Invalid value for `fcy_total_balance`, length must be less than or equal to `20`")  # noqa: E501
        if fcy_total_balance is not None and len(fcy_total_balance) < 3:
            raise ValueError("Invalid value for `fcy_total_balance`, length must be greater than or equal to `3`")  # noqa: E501

        self._fcy_total_balance = fcy_total_balance

    @property
    def ttb(self):
        """Gets the ttb of this SpAccountFcyBalance.  # noqa: E501

        外貨レート 半角数字　少数点および小数部最大3桁　マイナス含む   # noqa: E501

        :return: The ttb of this SpAccountFcyBalance.  # noqa: E501
        :rtype: str
        """
        return self._ttb

    @ttb.setter
    def ttb(self, ttb):
        """Sets the ttb of this SpAccountFcyBalance.

        外貨レート 半角数字　少数点および小数部最大3桁　マイナス含む   # noqa: E501

        :param ttb: The ttb of this SpAccountFcyBalance.  # noqa: E501
        :type: str
        """
        if ttb is None:
            raise ValueError("Invalid value for `ttb`, must not be `None`")  # noqa: E501
        if ttb is not None and len(ttb) > 20:
            raise ValueError("Invalid value for `ttb`, length must be less than or equal to `20`")  # noqa: E501
        if ttb is not None and len(ttb) < 3:
            raise ValueError("Invalid value for `ttb`, length must be greater than or equal to `3`")  # noqa: E501

        self._ttb = ttb

    @property
    def base_rate_date(self):
        """Gets the base_rate_date of this SpAccountFcyBalance.  # noqa: E501

        外貨レート基準日 半角文字 外貨レートの基準日を示します YYYY-MM-DD形式   # noqa: E501

        :return: The base_rate_date of this SpAccountFcyBalance.  # noqa: E501
        :rtype: str
        """
        return self._base_rate_date

    @base_rate_date.setter
    def base_rate_date(self, base_rate_date):
        """Sets the base_rate_date of this SpAccountFcyBalance.

        外貨レート基準日 半角文字 外貨レートの基準日を示します YYYY-MM-DD形式   # noqa: E501

        :param base_rate_date: The base_rate_date of this SpAccountFcyBalance.  # noqa: E501
        :type: str
        """
        if base_rate_date is None:
            raise ValueError("Invalid value for `base_rate_date`, must not be `None`")  # noqa: E501
        if base_rate_date is not None and len(base_rate_date) > 10:
            raise ValueError("Invalid value for `base_rate_date`, length must be less than or equal to `10`")  # noqa: E501
        if base_rate_date is not None and len(base_rate_date) < 10:
            raise ValueError("Invalid value for `base_rate_date`, length must be greater than or equal to `10`")  # noqa: E501

        self._base_rate_date = base_rate_date

    @property
    def base_rate_time(self):
        """Gets the base_rate_time of this SpAccountFcyBalance.  # noqa: E501

        外貨レート基準時刻 半角文字 外貨レートの基準時刻を示します HH:MM:SS+09:00形式   # noqa: E501

        :return: The base_rate_time of this SpAccountFcyBalance.  # noqa: E501
        :rtype: str
        """
        return self._base_rate_time

    @base_rate_time.setter
    def base_rate_time(self, base_rate_time):
        """Sets the base_rate_time of this SpAccountFcyBalance.

        外貨レート基準時刻 半角文字 外貨レートの基準時刻を示します HH:MM:SS+09:00形式   # noqa: E501

        :param base_rate_time: The base_rate_time of this SpAccountFcyBalance.  # noqa: E501
        :type: str
        """
        if base_rate_time is None:
            raise ValueError("Invalid value for `base_rate_time`, must not be `None`")  # noqa: E501
        if base_rate_time is not None and len(base_rate_time) > 14:
            raise ValueError("Invalid value for `base_rate_time`, length must be less than or equal to `14`")  # noqa: E501
        if base_rate_time is not None and len(base_rate_time) < 14:
            raise ValueError("Invalid value for `base_rate_time`, length must be greater than or equal to `14`")  # noqa: E501

        self._base_rate_time = base_rate_time

    @property
    def yen_equivalent(self):
        """Gets the yen_equivalent of this SpAccountFcyBalance.  # noqa: E501

        外貨円換算額 半角数字　マイナス含む 外貨残高を円に換算した額   # noqa: E501

        :return: The yen_equivalent of this SpAccountFcyBalance.  # noqa: E501
        :rtype: str
        """
        return self._yen_equivalent

    @yen_equivalent.setter
    def yen_equivalent(self, yen_equivalent):
        """Sets the yen_equivalent of this SpAccountFcyBalance.

        外貨円換算額 半角数字　マイナス含む 外貨残高を円に換算した額   # noqa: E501

        :param yen_equivalent: The yen_equivalent of this SpAccountFcyBalance.  # noqa: E501
        :type: str
        """
        if yen_equivalent is None:
            raise ValueError("Invalid value for `yen_equivalent`, must not be `None`")  # noqa: E501
        if yen_equivalent is not None and len(yen_equivalent) > 20:
            raise ValueError("Invalid value for `yen_equivalent`, length must be less than or equal to `20`")  # noqa: E501
        if yen_equivalent is not None and len(yen_equivalent) < 1:
            raise ValueError("Invalid value for `yen_equivalent`, length must be greater than or equal to `1`")  # noqa: E501

        self._yen_equivalent = yen_equivalent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpAccountFcyBalance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpAccountFcyBalance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
