# coding: utf-8

"""
    GMO Aozora Net Bank Open API

    <p>Ph2.5向けに作成したもの</p>   # noqa: E501

    OpenAPI spec version: 1.1.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ganb_webhook_client.models.account import Account  # noqa: F401,E501
from ganb_webhook_client.models.va_transaction import VaTransaction  # noqa: F401,E501


class VaDepositTransactionMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_id': 'str',
        'timestamp': 'str',
        'account': 'Account',
        'va_transaction': 'VaTransaction'
    }

    attribute_map = {
        'message_id': 'messageId',
        'timestamp': 'timestamp',
        'account': 'account',
        'va_transaction': 'vaTransaction'
    }

    def __init__(self, message_id=None, timestamp=None, account=None, va_transaction=None):  # noqa: E501
        """VaDepositTransactionMessage - a model defined in Swagger"""  # noqa: E501

        self._message_id = None
        self._timestamp = None
        self._account = None
        self._va_transaction = None
        self.discriminator = None

        self.message_id = message_id
        self.timestamp = timestamp
        self.account = account
        self.va_transaction = va_transaction

    @property
    def message_id(self):
        """Gets the message_id of this VaDepositTransactionMessage.  # noqa: E501

        メッセージID 半角英数字 メッセージを一意に識別するID   # noqa: E501

        :return: The message_id of this VaDepositTransactionMessage.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this VaDepositTransactionMessage.

        メッセージID 半角英数字 メッセージを一意に識別するID   # noqa: E501

        :param message_id: The message_id of this VaDepositTransactionMessage.  # noqa: E501
        :type: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")  # noqa: E501
        if message_id is not None and len(message_id) > 19:
            raise ValueError("Invalid value for `message_id`, length must be less than or equal to `19`")  # noqa: E501
        if message_id is not None and len(message_id) < 19:
            raise ValueError("Invalid value for `message_id`, length must be greater than or equal to `19`")  # noqa: E501

        self._message_id = message_id

    @property
    def timestamp(self):
        """Gets the timestamp of this VaDepositTransactionMessage.  # noqa: E501

        イベント生成日時 半角文字 ISO8601 時差(offset)も表記 YYYY-MM-DDTHH:MM:SS+09:00形式   # noqa: E501

        :return: The timestamp of this VaDepositTransactionMessage.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this VaDepositTransactionMessage.

        イベント生成日時 半角文字 ISO8601 時差(offset)も表記 YYYY-MM-DDTHH:MM:SS+09:00形式   # noqa: E501

        :param timestamp: The timestamp of this VaDepositTransactionMessage.  # noqa: E501
        :type: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501
        if timestamp is not None and len(timestamp) > 25:
            raise ValueError("Invalid value for `timestamp`, length must be less than or equal to `25`")  # noqa: E501
        if timestamp is not None and len(timestamp) < 25:
            raise ValueError("Invalid value for `timestamp`, length must be greater than or equal to `25`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def account(self):
        """Gets the account of this VaDepositTransactionMessage.  # noqa: E501


        :return: The account of this VaDepositTransactionMessage.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this VaDepositTransactionMessage.


        :param account: The account of this VaDepositTransactionMessage.  # noqa: E501
        :type: Account
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def va_transaction(self):
        """Gets the va_transaction of this VaDepositTransactionMessage.  # noqa: E501


        :return: The va_transaction of this VaDepositTransactionMessage.  # noqa: E501
        :rtype: VaTransaction
        """
        return self._va_transaction

    @va_transaction.setter
    def va_transaction(self, va_transaction):
        """Sets the va_transaction of this VaDepositTransactionMessage.


        :param va_transaction: The va_transaction of this VaDepositTransactionMessage.  # noqa: E501
        :type: VaTransaction
        """
        if va_transaction is None:
            raise ValueError("Invalid value for `va_transaction`, must not be `None`")  # noqa: E501

        self._va_transaction = va_transaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VaDepositTransactionMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VaDepositTransactionMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
