# coding: utf-8

"""
    GMO Aozora Net Bank Open API

    <p>Ph2.5向けに作成したもの</p>   # noqa: E501

    OpenAPI spec version: 1.1.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ErrorResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_code': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'error_code': 'errorCode',
        'error_message': 'errorMessage'
    }

    def __init__(self, error_code=None, error_message=None):  # noqa: E501
        """ErrorResponse - a model defined in Swagger"""  # noqa: E501

        self._error_code = None
        self._error_message = None
        self.discriminator = None

        self.error_code = error_code
        self.error_message = error_message

    @property
    def error_code(self):
        """Gets the error_code of this ErrorResponse.  # noqa: E501

        エラーコード 半角英数文字   # noqa: E501

        :return: The error_code of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ErrorResponse.

        エラーコード 半角英数文字   # noqa: E501

        :param error_code: The error_code of this ErrorResponse.  # noqa: E501
        :type: str
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")  # noqa: E501
        if error_code is not None and len(error_code) > 10:
            raise ValueError("Invalid value for `error_code`, length must be less than or equal to `10`")  # noqa: E501
        if error_code is not None and len(error_code) < 1:
            raise ValueError("Invalid value for `error_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this ErrorResponse.  # noqa: E501

        エラーメッセージ 全半角英数記号文字   # noqa: E501

        :return: The error_message of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ErrorResponse.

        エラーメッセージ 全半角英数記号文字   # noqa: E501

        :param error_message: The error_message of this ErrorResponse.  # noqa: E501
        :type: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")  # noqa: E501
        if error_message is not None and len(error_message) > 255:
            raise ValueError("Invalid value for `error_message`, length must be less than or equal to `255`")  # noqa: E501
        if error_message is not None and len(error_message) < 1:
            raise ValueError("Invalid value for `error_message`, length must be greater than or equal to `1`")  # noqa: E501

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
